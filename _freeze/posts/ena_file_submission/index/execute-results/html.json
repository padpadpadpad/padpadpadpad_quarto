{
  "hash": "60ec6a607104fee8297a9d90ea584cea",
  "result": {
    "markdown": "---\ntitle: Submitting files to ENA\ndescription: |\n  A brief guide to submitting sequencing files to the European Nucleotide Archive (ENA) using the Webin-CLI interface.\nauthor: Daniel Padfield\ndate: \"11/29/2023\"\ndate-modified: last-modified\ncategories: \n  - sequencing\n  - ENA\n  - R\n  - bash\nimage: \"/posts/ena_file_submission/preview.png\"\nexecute:\n  message: false\n  warning: false\n  eval: false\n  fig.align: \"center\"\n---\n\n\n## Introduction\n\nThe [European Nucleotide Archive](https://www.ebi.ac.uk/ena/browser/about) (ENA) provides a comprehensive record of the world’s nucleotide sequencing information, covering raw sequencing data, sequence assembly information and functional annotation. I always find it so painful to submit to ENA. I do it so rarely (maybe once or twice a year) that by the time I come to do it again, I have forgotten how to do it. The ENA documentation is quite good, but it is not always clear what you need to do. I have written this post to help me remember how to submit files using the Webin-CLI software and hopefully help others who are in a similar position.\n\nSo I assume that you have stumbled across this post in a similar position: you have a bunch of sequencing data you want to submit to ENA. Throughout this post, I will reference the [online documentation](https://ena-docs.readthedocs.io/en/latest/) provided by the ENA, and you will need to signup to the [interactive](https://www.ebi.ac.uk/ena/submit/sra/#home) Webin submission service and download the Webin command line submission interface ([Webin-CLI](https://github.com/enasequence/webin-cli)).\n\nOverall the process for submitting sequencing files can be summarised as:\n\n-   Register a study (interactive online)\n-   Register samples (interactive online and using Excel)\n-   Create sample metadata (using Excel)\n-   Make individual manifest files for each sample (I use R)\n-   Rename files if needed (I use R)\n-   Submit samples (using bash and Webin-CLI)\n\n## Submitting files to ENA\n\nWe will go through each one to summarise the main steps and things I often get wrong.\n\n### 1. Register study using the interactive interface\n\nThe first thing to do is to register your study. This is easiest to do interactively on the [Webin Submissions Portal](https://www.ebi.ac.uk/ena/submit/webin/) and the ENA have a help page on this [here](https://ena-docs.readthedocs.io/en/latest/submit/study/interactive.html). The Register Study link is currently found towards the top left of the page.\n\n![ENA submission portal](register_study.png)\n\nThis is the easiest bit of the process and probably the only part that doesn't take me several attempts. If submitting sequences from a study that is nearing publication, you can enter the study title and the abstract. The release date of the study is when all the sequences will become public. I generally put this for a week after I started the process to allow me to make many mistakes, but post submission you can always bring this date forward. Citations can be added at a later date, so it is possible to submit sequencing before the work is published.\n\nMake a note of the Accession Number for your study as it will be used later (should start with **PRJEB**).\n\n### 2. Register samples using the interactive interface\n\nA sample is sequenced biomaterial, and we need to register samples to make sure each sample has metadata associated with it. Samples are associated with checklists, which define the fields used to annotate the samples. The ENA help page for this is quite [good](https://ena-docs.readthedocs.io/en/latest/submit/samples/interactive.html).\n\nWhen using the interactive submission portal, you need to click through to **Register Samples** and then click **Download spreadsheet to register samples**. There are many different standardised sheets to choose from which should help provide consistent metadata that will allow for better reporting of datasets in the future.\n\nHowever, as most of the sequencing I upload are from bespoke, controlled experiments in the lab, I have generally only used the **ENA default sample checklist** which is within **Other Checklists** There are some fields that are mandatory for that checklist. What they are, and their definition is displayed after you have clicked on your checklist.\n\n![ENA sample fields for default sample checklist](fields.png)\n\nIf there are extra fields you want to add, then add them, otherwise click **Next** and click **Download Template Spreadsheet**, which will download a .tsv file that contains the minimum required fields for the ENA sample register. When opened in Excel (**the horror**), this will look something like this.\n\n![Empty ENA samples checklist](empty_samples_checklist.png) \n\nYou can then fill out your samples checklist. There is some key advice from the [ENA documentation](https://ena-docs.readthedocs.io/en/latest/submit/samples/interactive.html) when filling out this spreadsheet:\n\n-   Do not remove or modify, the first three lines of the spreadsheet, which specify the checklist in use, field names, and units row.\n-   Enter data in row 4 of the spreadsheet onwards. Use row 3 (#units) to specify units where required by the checklist.\n-   You can add custom fields by inserting new column headers\n-   Do not edit the existing column names\n\nFrom doing this a few times, I have my own advice for future me that past me learned the hard way:\n\n-   Every sample is always associated with a taxon, which is inputted into the **tax_id** column and then the **scientific_name** column. I use the NCBI [taxonomy browser](https://www.ncbi.nlm.nih.gov/taxonomy) to find the correct taxon. For example, sediment metagenome has the taxonomy ID of 749907.\n-   When inputting numbers into Excel, when you double click them to go autofill, they often follow a numeric rule (x+1) or something. Copy and paste the same number into the cell below, and then double click them both to autofill and this does not happen.\n-   Each sample needs to have its each individual row. The **sample_alias** column needs to be a unique identifier to identify that sample. It is unique to **ALL** future submissions too so make sure you label them in relation to the study **AND** the sample. For example for a recent project on Myxobacteria I started all of them with **myxo_16s_s1** or **myxo_rpoB_1** etc. All the other columns are relative self explanatory. You can also add metadata columns. An example completed file - saved as a`.txt\\` might look something like this.\n-   I generally have the same name for the **sample_title** as I do for the **sample_alias**.\n-   In the **sample_description** column, I generally put what sequencing was done.\n-   For most studies, I also add extra columns that are unique to the study and represent treatments and extra data that is interesting and needed to best understand the files. For example, I added columns about what predefined habitat the samples came from and what biome the sample was classified as. I also added metadata collected by a collaborator on where the sample was taken and the latitude and longitude.\n\nMy most recent sample checklist looked like this:\n\n![Complete ENA samples checklist](complete_samples_checklist.png)\n\nOnce completed, this file can be uploaded to the ENA interactive web portal by clicking **Register Samples** -\\> **Upload filled spreadsheet to register samples** and then **Submit Completed Spreadsheet** after you have chosen your file. The portal will tell you if you are successful which means you can move on to the next stage.\n\n### 3. Create sample metadata\n\nAfter doing steps 1 and 2, you should receive emails containing the Accession Numbers of your experiment and of your samples. These need to be included in a manifest file that is required for the submission of each sample to ENA. Details on the manifest file can be found [here](https://ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html).\n\nThe information needed for each sample may change based on what files are being uploaded. For paired end fastq reads, they are generally:\n\n-   STUDY: Study Accession Number, from Step 1.\n-   SAMPLE: Sample Accession Number, from Step 2.\n-   NAME: Experiment name, which I generally use the same as the **sample_alias**.\n-   PLATFORM: Sequencing platform\n-   INSTRUMENT: Sequencing instrument\n-   INSERT_SIZE: Size of the sequence is the length of the sequence between the adapter sequences.\n-   LIBRARY_SOURCE: What type of information was sequenced? DNA, RNA, etc.\n-   LIBRARY_SELECTION: Library selection. What selection was done on the DNA? PCR, random, etc.\n-   LIBRARY_STRATEGY: Library strategy. What type of sequencing stratedy was done? WGS, RNA-Seq, etc.\n-   FASTQ: File name of forward fastq file\n-   FASTQ: File name of reverse fastq file\n\nI generally create another Excel file, with these values as column names, where I document all the samples from a study. I call this **sample_metadata.csv**, and my most recent one looks like this.\n\n![Example sample metadata](sample_metadata.png)\n\nI leave the fastq columns blank because I am going to rename the files before uploading to be the same as the **sample_alias**.\n\n### 4. Create manifest files for each sample\n\nEach sample needs its own manifest file, so I use R to create manifest files from the **sample_metadata.csv** file. We want to make a manifest file for each row of the spreadsheet.\n\nTo reiterate, I try to use the **sample_alias** as a unique ID for each manifest file and fastq file linked to the that sample. So I will name each manifest file as the **sample_alias**.txt, and then rename the fastq files to be the same as the **sample_alias**_R1/R2.fastq.gz.\n\nExample code to do this could be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create single manifest file for each sample from a sample metadata file\n\n# load in tidyverse\nlibrary(tidyverse)\n\n# read in sample metadata column\nfiles <- read.csv('ena_submission/sample_metadata.csv') %>%\n  # make numeric columns character so that pivot longer works\n  mutate(across(where(is.numeric), as.character))\n\n# create single manifest file for each row\n# run a for loop\nfor(i in 1:nrow(files)){\n  \n  # grab the first row\n  temp <- files[i,]\n  \n  # go from wide to long format\n  temp <- pivot_longer(temp, cols = everything())    \n  \n  # grab the file name from the NAME row (third element)\n  file_name <- temp$value[3]\n  \n  # rename the fastq columns FASTQ\n  temp$name[10:11] <- 'FASTQ'\n  temp <- temp[1:11,]\n  \n  # name the fastq files R1 and R2 and the file name\n  temp$value[10] <- paste(file_name, '_R1.fastq.gz', sep = '')\n  temp$value[11] <- paste(file_name, '_R2.fastq.gz', sep = '')\n  \n  # save it out\n  # need to create a folder for your manifest files\n  write.table(temp, paste('manifest_files/', file_name, '.txt', sep = ''), row.names = FALSE, col.names = FALSE, quote = FALSE)\n}\n```\n:::\n\n\nThis should result in you having a unique manifest file for each of your samples that you registered.\n\nAn example of the top row from my most recent submission is a file created called **myxo_16s_s1.txt**. Its contents are:\n\n```\nSTUDY PRJEB73761\nSAMPLE ERS18415308\nNAME myxo_16s_s1\nPLATFORM ILLUMINA\nINSTRUMENT Illumina MiSeq\nINSERT_SIZE 300\nLIBRARY_SOURCE GENOMIC\nLIBRARY_SELECTION PCR\nLIBRARY_STRATEGY AMPLICON\nFASTQ myxo_16s_s1_R1.fastq.gz\nFASTQ myxo_16s_s1_R2.fastq.gz\n```\n\n### 5. Submit samples\n\nOnce you have your manifest files, you can submit them to ENA. However, it is likely that before you do this you may need to rename your files to match the names you specified in the FASTQ values of each manifest file. This is because the manifest file will be looking for files with those names in the directory where you specify the fastq files are.\n\nSo I have started creating a new folder called **ena_upload** where I copy and rename the samples to for ena submission. These can then be deleted after submission is successful.\n\nI do file renaming in R, and this is likely to be bespoke for each project and how you have named your sample aliases. In case there are mistakes down the line in your file renaming or submission - or you find that some files do not have the metadata you thought they had - it might be useful to save out a csv with all the original names and the new names. \n\nAn example of what this might look like is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rename files for ena upload\n\n# list manifest files names\nmanifest_files <- list.files('manifest_files', full.names = TRUE)\n\n# list the sequencing files to rename\nfiles <- list.files('where_the_raw_files_live', full.names = TRUE, pattern = 'fastq|fq', recursive = TRUE)\n\n# empty dataframe to populate original file names and new file names\nd_files <- data.frame(manifest_file = rep(basename(manifest_files), each = 2)) %>%\n  mutate(original_file = NA, new_file = NA)\n\n# write for loop ro rename files\nfor(i in 1:length(manifest_files)){\n  \n  # grab the first row\n  temp <- d[i,]\n  \n  # grab the ith manifest fuke\n  temp <- manifest_files[i]\n  \n  # remove file extension\n  temp <- tools::file_path_sans_ext(temp)\n  \n  # in this example, the sample identifier is the s1 part, so I will grab that\n  # this bit needs to allow you to find the sequencing files - given the current naming - that relate to that manifest file\n  temp_num <- str_split(temp, '_')[[1]][3]\n  \n  # find the sequencing files that link to that manifest file\n  files_temp <- files[str_detect(basename(files), paste(temp_num, '_', sep = ''))]\n  \n  # rename files for ena upload\n  # for R1 file\n\n  file.copy(files_temp[str_detect(basename(files_temp), 'R1')], paste('~/ena_upload/', temp, '_R1.fastq.gz', sep = ''))\n  # for R2 file\n  file.copy(files_temp[str_detect(basename(files_temp), 'R2')], paste('~/ena_upload/', temp, '_R2.fastq.gz', sep = ''))\n  \n  # populate d_files\n  d_files$original_file[(2*i)] <- basename(files_temp[str_detect(basename(files_temp), 'R1')])\n  d_files$original_file[(2*i)+1] <- basename(files_temp[str_detect(basename(files_temp), 'R2')])\n  d_files$new_file[(2*i)] <- paste(temp, '_R2.fastq.gz', sep = '')\n  d_files$new_file[(2*i)+1] <- paste(temp, '_R2.fastq.gz', sep = '')\n}\n\n# save out csv containing old and new names\nwrite.csv(d_files, 'file_renaming.csv', row.names = FALSE)\n```\n:::\n\n\n\nThis should result in the sequencing files being renamed to match the names specified in the manifest files. We should then be able to upload them to ENA. I use the ENA webin-cli tool to do this. You can find the documentation for this tool [here](https://ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html).\n\nWe can now run Webin-cli to submit our samples. We will start by validating our submission to check no terrible errors have occurred. This bit is now done in the **Terminal** using **bash**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# submitting files to ENA\n\n# check webin-CLI is working\n# download latest version from https://github.com/enasequence/webin-cli/releases\nwget https://github.com/enasequence/webin-cli/releases/download/7.0.1/webin-cli-7.0.1.jar\n\n# check it exists\nls\n\n# check it is working\njava -jar webin-cli-7.0.1.jar -version\n# seems to be working\n\n# open a screen\nscreen -ls # check what screen exist\nscreen -S ena # start a new screen called ena\n# screen -r ena # reopen the screen\n#screen -X -S ena quit # you want to kill the screen\n\n# validate each file submission\n\n# path to raw renamed sequencing files\nfastq_files=~/ena_upload\n\n# path to manifest files\nmanifest_files=~/manifest_files\n\n# create a manifest output folder\nmkdir -p $manifest_files/output\nmanifest_output=$manifest_files/output\n\n# run a test\nfile=$manifest_files/myxo_16s_s1.txt\n\n# run a for loop to submit sequencing files\nfor file in $manifest_files/*.txt\n\n    do\n        # cat the file\n        echo $file\n\n        # grab the file name without the extension\n        stub=$(basename ${file%.txt})\n\n        man_file=$file\n        \n        # make a folder for the output of the validation\n        mkdir -p $manifest_output/$stub\n\n        # run webin-cli - run validation to check\n        java -jar webin-cli-7.0.1.jar -validate -context reads -manifest $man_file -inputDir $fastq_files -outputDir $manifest_output/$stub -username your_username -password your_password\n        \n  done\n\n```\n:::\n\n\nAfter this has ran, you can check the output of all the validation files. If there are no errors, you can then submit the files to ENA. This can be done quite simply in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check validation reports\n\n# list validation folders\nvalidation_folders <- list.files('~/manifest_files/output', full.names = TRUE)\n\n# setup empty dataframe to populate\nd_check <- data.frame(sample = basename(validation_folders),\n                      check = NA, \n                      fullname = validation_folders)\n\n# run a for loop to grab the output of the validation report for each sample\nfor(i in 1:nrow(d_check)){\n  # read file in\n  temp <- readLines(file.path(d_check$fullname[i], 'webin-cli.report'))\n  \n  # input it into the correct place in the dataframe\n  d_check$check[i] <- temp[length(temp)]\n  \n}\n\n# drop the full name column\nd_check <- select(d_check, -fullname)\n\nd_check\n```\n:::\n\n\nMy most recent one of these looks like this:\n\n![Checking validation of manifest files](check_validation.png)\n\nWe can then run the submission for realsies! This bit is now done in the **Terminal** using **bash**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# run a for loop to submit sequencing files\nfor file in $manifest_files/*.txt\n    do\n        # cat the file\n        echo $file\n\n        # grab the file name without the extension\n        stub=$(basename ${file%.txt})\n\n        man_file=$file\n\n        # run webin-cli\n        java -jar webin-cli-7.0.1.jar -submit -context reads -manifest $man_file -inputDir $fastq_files -outputDir $manifest_output/$stub -username your_username -password your_password\n  done\n```\n:::\n\n\nWith any luck, these files should then be viewable the Samples Report section of the ENA Web Portal.\n\n## Conclusion\n\nI hope you have enjoyed reading this word vomit of a blog post about submitting to ENA. I hope it is useful to someone. Future me at the very least will be grateful for it. If you have any questions, please feel free to get in touch.\n\n## Extras\n\n### Permitted values for platform of a manifest file\n\n-   BGISEQ: Sequencers based on DNBSEQ by MGI Tech.\n-   CAPILLARY: Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied BioSciences).\n-   DNBSEQ: Uses DNA nanoballs(DNB) and regular array chips.\n-   ELEMENT: Element Biosciences uses avidity sequencing: a polymerase inserts nucleotides, detected using fluorescence.\n-   HELICOS: Helicos is similar to 454 technology - uses 1-color sequential flows.\n-   ILLUMINA: 54 technology use 1-color sequential flows: 454 technology use 1-color sequential flows.\n-   ION_TORRENT: Ion Torrent Personal Genome Machine (PGM) from Life Technologies. Directly translates chemically encoded information (A, C, G, T) into digital on semiconductor chip.\n-   LS454: 454 technology use 1-color sequential flows.\n-   OXFORD_NANOPORE: Oxford Nanopore platform type. nanopore-based electronic single molecule analysis.\n-   PACBIO_SMRT: PacificBiosciences platform type for the single molecule real time (SMRT) technology.\n-   ULTIMA: Ultima Genomics platform type. Flowing one nucleotide at a time in order, iteratively.\n\n### Permitted value for instrument of a manifest file\n\n-   454 GS\n-   454 GS 20\n-   454 GS FLX\n-   454 GS FLX Titanium\n-   454 GS FLX+\n-   454 GS Junior\n-   AB 310 Genetic Analyzer\n-   AB 3130 Genetic Analyzer\n-   AB 3130xL Genetic Analyzer\n-   AB 3500 Genetic Analyzer\n-   AB 3500xL Genetic Analyzer\n-   AB 3730 Genetic Analyzer\n-   AB 3730xL Genetic Analyzer\n-   AB 5500 Genetic Analyzer\n-   AB 5500xl Genetic Analyzer\n-   AB 5500xl-W Genetic Analysis System\n-   BGISEQ-50\n-   BGISEQ-500\n-   DNBSEQ-G400\n-   DNBSEQ-G400 FAST\n-   DNBSEQ-G50\n-   DNBSEQ-T7\n-   Element AVITI\n-   GridION\n-   Helicos HeliScope\n-   HiSeq X Five\n-   HiSeq X Ten\n-   Illumina Genome Analyzer\n-   Illumina Genome Analyzer II\n-   Illumina Genome Analyzer IIx\n-   Illumina HiScanSQ\n-   Illumina HiSeq 1000\n-   Illumina HiSeq 1500\n-   Illumina HiSeq 2000\n-   Illumina HiSeq 2500\n-   Illumina HiSeq 3000\n-   Illumina HiSeq 4000\n-   Illumina HiSeq X\n-   Illumina MiSeq\n-   Illumina MiniSeq\n-   Illumina NovaSeq 6000\n-   Illumina NovaSeq X\n-   Illumina iSeq 100\n-   Ion GeneStudio S5\n-   Ion GeneStudio S5 Plus\n-   Ion GeneStudio S5 Prime\n-   Ion Torrent Genexus\n-   Ion Torrent PGM\n-   Ion Torrent Proton\n-   Ion Torrent S5\n-   Ion Torrent S5 XL\n-   MGISEQ-2000RS\n-   MinION\n-   NextSeq 1000\n-   NextSeq 2000\n-   NextSeq 500\n-   NextSeq 550\n-   PacBio RS\n-   PacBio RS II\n-   PromethION\n-   Sequel\n-   Sequel II\n-   Sequel IIe\n-   UG 100\n-   unspecified\n\n### Permitted values for library selection\n\n-   RANDOM: No Selection or Random selection\n-   PCR: target enrichment via PCR\n-   RANDOM PCR: Source material was selected by randomly generated primers.\n-   RT-PCR: target enrichment via\n-   HMPR: Hypo-methylated partial restriction digest\n-   MF: Methyl Filtrated\n-   repeat fractionation: Selection for less repetitive (and more gene rich) sequence through Cot filtration (CF) or other fractionation techniques based on DNA kinetics.\n-   size fractionation: Physical selection of size appropriate targets.\n-   MSLL: Methylation Spanning Linking Library\n-   cDNA: PolyA selection or enrichment for messenger RNA (mRNA); synonymize with PolyA\n-   cDNA_randomPriming:\n-   cDNA_oligo_dT:\n-   PolyA: PolyA selection or enrichment for messenger RNA (mRNA); should replace cDNA enumeration.\n-   Oligo-dT: enrichment of messenger RNA (mRNA) by hybridization to Oligo-dT.\n-   Inverse rRNA: depletion of ribosomal RNA by oligo hybridization.\n-   Inverse rRNA selection: depletion of ribosomal RNA by inverse oligo hybridization.\n-   ChIP: Chromatin immunoprecipitation\n-   ChIP-Seq: Chromatin immunoPrecipitation, reveals binding sites of specific proteins, typically transcription factors (TFs) using antibodies to extract DNA fragments bound to the target protein.\n-   MNase: Identifies well-positioned nucleosomes. uses Micrococcal Nuclease (MNase) is an endo-exonuclease that processively digests DNA until an obstruction, such as a nucleosome, is reached.\n-   DNase: DNase I endonuclease digestion and size selection reveals regions of chromatin where the DNA is highly sensitive to DNase I.\n-   Hybrid Selection: Selection by hybridization in array or solution.\n-   Reduced Representation: Reproducible genomic subsets, often generated by restriction fragment size selection, containing a manageable number of loci to facilitate re-sampling.\n-   Restriction Digest: DNA fractionation using restriction enzymes.\n-   5-methylcytidine antibody: Selection of methylated DNA fragments using an antibody raised against 5-methylcytosine or 5-methylcytidine (m5C).\n-   MBD2 protein methyl-CpG binding domain: Enrichment by methyl-CpG binding domain.\n-   CAGE: Cap-analysis gene expression.\n-   RACE: Rapid Amplification of cDNA Ends.\n-   MDA: Multiple Displacement Amplification, a non-PCR based DNA amplification technique that amplifies a minute quantifies of DNA to levels suitable for genomic analysis.\n-   padlock probes capture method: Targeted sequence capture protocol covering an arbitrary set of nonrepetitive genomics targets. An example is capture bisulfite sequencing using padlock probes (BSPP).\n-   other: Other library enrichment, screening, or selection process.\n-   unspecified: Library enrichment, screening, or selection is not specified.\n\n#### Permitted values for library source\n\n-   GENOMIC: Genomic DNA (includes PCR products from genomic DNA).\n-   GENOMIC SINGLE CELL\n-   TRANSCRIPTOMIC: Transcription products or non genomic DNA (EST, cDNA, RT-PCR, screened libraries).\n-   TRANSCRIPTOMIC SINGLE CELL:\n-   METAGENOMIC: Mixed material from metagenome.\n-   METATRANSCRIPTOMIC: Transcription products from community targets\n-   SYNTHETIC: Synthetic DNA.\n-   VIRAL RNA: Viral RNA.\n-   OTHER: Other, unspecified, or unknown library source material.\n\n### Permitted values for library strategy\n\n-   WGS: Whole Genome Sequencing - random sequencing of the whole genome (see pubmed 10731132 for details)\n-   WGA: Whole Genome Amplification followed by random sequencing. (see pubmed 1631067,8962113 for details)\n-   WXS: Random sequencing of exonic regions selected from the genome. (see pubmed 20111037 for details)\n-   RNA-Seq: Random sequencing of whole transcriptome, also known as Whole Transcriptome Shotgun Sequencing, or WTSS). (see pubmed 18611170 for details)\n-   ssRNA-seq: Strand-specific RNA sequencing.\n-   miRNA-Seq: Micro RNA sequencing strategy designed to capture post-transcriptional RNA elements and include non-coding functional elements. (see pubmed 21787409 for details)\n-   ncRNA-Seq: Capture of other non-coding RNA types, including post-translation modification types such as snRNA (small nuclear RNA) or snoRNA (small nucleolar RNA), or expression regulation types such as siRNA (small interfering RNA) or piRNA/piwi/RNA (piwi-interacting RNA).\n-   FL-cDNA: Full-length sequencing of cDNA templates\n-   EST: Single pass sequencing of cDNA templates\n-   Hi-C: Chromosome Conformation Capture technique where a biotin-labeled nucleotide is incorporated at the ligation junction, enabling selective purification of chimeric DNA ligation junctions followed by deep sequencing.\n-   ATAC-seq: Assay for Transposase-Accessible Chromatin (ATAC) strategy is used to study genome-wide chromatin accessibility. alternative method to DNase-seq that uses an engineered Tn5 transposase to cleave DNA and to integrate primer DNA sequences into the cleaved genomic DNA.\n-   WCS: Random sequencing of a whole chromosome or other replicon isolated from a genome.\n-   RAD-Seq:\n-   CLONE: Genomic clone based (hierarchical) sequencing.\n-   POOLCLONE: Shotgun of pooled clones (usually BACs and Fosmids).\n-   AMPLICON: Sequencing of overlapping or distinct PCR or RT-PCR products. For example, metagenomic community profiling using SSU rRNA.\n-   CLONEEND: Clone end (5’, 3’, or both) sequencing.\n-   FINISHING: Sequencing intended to finish (close) gaps in existing coverage.\n-   ChIP-Seq: ChIP-seq, Chromatin ImmunoPrecipitation, reveals binding sites of specific proteins, typically transcription factors (TFs) using antibodies to extract DNA fragments bound to the target protein.\n-   MNase-Seq: Identifies well-positioned nucleosomes. uses Micrococcal Nuclease (MNase) is an endo-exonuclease that processively digests DNA until an obstruction, such as a nucleosome, is reached.\n-   Ribo-Seq: Ribosome profiling (also named ribosome footprinting) uses specialized messenger RNA (mRNA) sequencing to determine which mRNAs are being actively translated and produces a “global snapshot” of all the ribosomes active in a cell at a particular moment, known as a translatome.\n-   DNase-Hypersensitivity: Sequencing of hypersensitive sites, or segments of open chromatin that are more readily cleaved by DNaseI.\n-   Bisulfite-Seq: MethylC-seq. Sequencing following treatment of DNA with bisulfite to convert cytosine residues to uracil depending on methylation status.\n-   CTS: Concatenated Tag Sequencing\n-   MRE-Seq: Methylation-Sensitive Restriction Enzyme Sequencing.\n-   MeDIP-Seq: Methylated DNA Immunoprecipitation Sequencing.\n-   MBD-Seq: Methyl CpG Binding Domain Sequencing.\n-   Tn-Seq: Quantitatively determine fitness of bacterial genes based on how many times a purposely seeded transposon gets inserted into each gene of a colony after some time.\n-   VALIDATION: CGHub special request: Independent experiment to re-evaluate putative variants.\n-   FAIRE-seq: Formaldehyde Assisted Isolation of Regulatory Elements. Reveals regions of open chromatin.\n-   SELEX: Systematic Evolution of Ligands by Exponential enrichment\n-   RIP-Seq: Direct sequencing of RNA immunoprecipitates (includes CLIP-Seq, HITS-CLIP and PAR-CLIP).\n-   ChIA-PET: Direct sequencing of proximity-ligated chromatin immunoprecipitates.\n-   Synthetic-Long-Read: binning and barcoding of large DNA fragments to facilitate assembly of the fragment\n-   Targeted-Capture: Enrichment of a targeted subset of loci.\n-   Tethered Chromatin Conformation Capture:\n-   OTHER: Library strategy not listed.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}